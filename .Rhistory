-log10(t_test_genes$p.value),
toString(t_test_genes$conf.int[1:2]),
t_test_genes$statistic,
toString(power_test_genes$power),
toString(cohen_test_genes$estimate),
toString(cohen_test_genes$magnitude[1]),
toString(cohen_test_genes$conf.int),
avgNot,
avgIn,
virus_pos_count,
virus_neg_count,
paste(virus_sample_names,collapse=";")
)
} else
{
genes_out<-rbind(genes_out,
c(gene_name_now,
"LIHC",
t_test_genes$p.value,
-log10(t_test_genes$p.value),
toString(t_test_genes$conf.int[1:2]),
t_test_genes$statistic,
toString(power_test_genes$power),
toString(cohen_test_genes$estimate),
toString(cohen_test_genes$magnitude[1]),
toString(cohen_test_genes$conf.int),
avgNot,
avgIn,
virus_pos_count,
virus_neg_count,
paste(virus_sample_names,collapse=";")
))
}
}
#}
genes_out_frame<-data.frame(genes_out)
colnames(genes_out_frame)<-c("Gene symbol",
"Cell_type",
"p-value",
"-log p",
"conf-int",
"t-stat",
"power",
"cohen_estimate",
"cohen_mag",
"cohen_conf",
"avg_not",
"avg_mut",
"virus+_count",
"virus-_count",
"virus+_Sample_ids")
#unique(new_anno_frame$Gene.symbol)
genes_out_anno<-inner_join(genes_out_frame, new_anno_frame,
by=c("Gene symbol"="Gene.symbol"))
write_xlsx(genes_out_anno, path=output_gene_file, col_names = TRUE)
#Get the affy gene annotation file:
anno_file <- file.choose()
anno_file_frame <- read.csv(anno_file)
anno_symbol_frame<-anno_file_frame[-which(anno_file_frame$Gene.symbol==""),]
new_anno_frame<-aggregate(x=anno_symbol_frame, by=list(Gene.symbol=anno_symbol_frame$Gene.symbol), FUN=paste,collapse=";")
#Remove the redundant fourth column:
new_anno_frame<-new_anno_frame[,-4]
#unique(new_anno_frame$Gene.symbol)
genes_out_anno<-inner_join(genes_out_frame, new_anno_frame,
by=c("Gene symbol"="Gene.symbol"))
write_xlsx(genes_out_anno, path=output_gene_file, col_names = TRUE)
View(genes_out_frame)
#unique(new_anno_frame$Gene.symbol)
genes_out_anno<-inner_join(genes_out_frame, new_anno_frame,
by=c("Gene symbol"="Gene.symbol"))
#unique(new_anno_frame$Gene.symbol)
genes_out_anno<-inner_join(genes_out_frame, new_anno_frame,
by=c("Gene symbol"="Gene.symbol"))
write_xlsx(genes_out_anno, path=output_gene_file, col_names = TRUE)
gsub("\|\\w+ *","",genes_out_frame$`Gene symbol`)
gsub("\\|\\w+ *","",genes_out_frame$`Gene symbol`)
genes_out_frame$`Gene symbol`<-gsub("\\|\\w+ *","",genes_out_frame$`Gene symbol`)
#unique(new_anno_frame$Gene.symbol)
genes_out_anno<-inner_join(genes_out_frame, new_anno_frame,
by=c("Gene symbol"="Gene.symbol"))
write_xlsx(genes_out_anno, path=output_gene_file, col_names = TRUE)
virus_pos_count
virus_sample_names
not_sample_names
tot_samples
length(virus_sample_group[virus_sample_group[,2]!="NA",1])
virus_status_casted[,c("PatientID","LIHC")]
virus_sample_group
View(virus_status_casted)
virus_sample_group <- virus_status_casted[,c("PatientID","LIHC")]
tot_samples<-length(virus_sample_group[virus_sample_group[,2]!="NA",1])
tot_samples
length(virus_sample_group)
total_tcga<-length(virus_sample_group[,2])
total_tcga<-length(unlist(virus_sample_group[,2]))
total_tcga
tot_samples<-length(virus_sample_group[virus_sample_group[,2]!="NA",])
tot_samples
tot_samples<-length(unlist(virus_sample_group[virus_sample_group[,2]!="NA",]))
tot_samples
virus_sample_group[virus_sample_group[,2]=="TRUE",]
virus_sample_names <- virus_sample_group[virus_sample_group[,2]=="TRUE",1]
not_sample_names <- virus_sample_group[virus_sample_group[,2]=="FALSE",1]
virus_pos_count<-length(virus_sample_names)
virus_neg_count<-length(not_sample_names)
virus_pos_count
virus_neg_count
virus_sample_names <- virus_sample_group[virus_sample_group[,2]=="TRUE",1]
not_sample_names <- virus_sample_group[virus_sample_group[,2]=="FALSE",1]
virus_pos_count<-length(virus_sample_names)
virus_neg_count<-length(not_sample_names)
length(unique(unlist(virus_sample_group[virus_sample_group[,2]!="NA",])))
length(unique(unlist(virus_sample_group[,2])))
length(unique(unlist(virus_sample_group[,2])))
length(unique(unlist(virus_sample_group[,1])))
View(virus_sample_group)
tot_samples<-length(unique(unlist(virus_sample_group[virus_sample_group[,2]!="NA",])))
#There are 8462 TCGA samples total
tot_samples
tot_samples<-length((unlist(virus_sample_group[virus_sample_group[,2]!="NA",]))
tot_samples
length((unlist(virus_sample_group[virus_sample_group[,2]!="NA",])
length(unlist(virus_sample_group[virus_sample_group[,2]!="NA",]))
length(unlist(virus_sample_group[virus_sample_group[,2]!="NA",]))
virus_sample_group[virus_sample_group[,2]!="NA",]
tot_samples<-virus_sample_group[virus_sample_group[,2]!="NA",]
View(tot_samples)
virus_sample_names <- virus_sample_group[virus_sample_group[,2]=="TRUE",1]
not_sample_names <- virus_sample_group[virus_sample_group[,2]=="FALSE",1]
virus_sample_names
virus_pos_count<-length(virus_sample_names)
virus_neg_count<-length(not_sample_names)
virus_pos_count
virus_neg_count
tot_samples<-virus_sample_group[virus_sample_group[,2]!="NA",]
tot_samples
#There are 8462 TCGA samples total
all_samples<-virus_sample_group[virus_sample_group[,2]!="NA",]
tot_samples<-length(all_samples)
tot_samples<-length(all_samples[,1])
genes_out = matrix(ncol=15)
#for(cancer_count in seq(from=2,by=1,to=ncol(virus_status_casted)))
#{
virus_sample_group <- virus_status_casted[,c("PatientID","LIHC")]
#total_tcga<-length(unique(unlist(virus_sample_group[,1])))
#There are 8462 TCGA samples total
all_samples<-virus_sample_group[virus_sample_group[,2]!="NA",]
tot_samples<-length(all_samples[,1])
#205 for LIHC
virus_sample_names <- virus_sample_group[virus_sample_group[,2]=="TRUE",1]
not_sample_names <- virus_sample_group[virus_sample_group[,2]=="FALSE",1]
virus_pos_count<-length(virus_sample_names)
virus_neg_count<-length(not_sample_names)
#virus_sample_names<-sub("^[0]+", "", virus_sample_names)
#virus_sample_names<-paste("sample_",virus_sample_names, sep="")
virus_sub_names<-gsub("-",".",virus_sample_names)
not_sub_names<-gsub("-",".",not_sample_names)
expression_frame_in<-grepl(paste(virus_sub_names,collapse="|"),colnames(expression_frame))
expression_frame_out<-grepl(paste(not_sub_names,collapse="|"),colnames(expression_frame))
for(gene_count in seq(from=1,by=1,to=nrow(expression_frame)))
{
gene_name_now<-as.character(expression_frame[gene_count,1])
print(paste(c(input_type,gene_count,gene_name_now),sep="  :  "))
data_in<-as.double(as.matrix(expression_frame[gene_count,expression_frame_in]))
data_out<-as.double(as.matrix(expression_frame[gene_count,expression_frame_out]))
avgIn<-mean(data_in)
avgNot<-mean(data_out)
t_test_genes<-t.test(data_in,data_out,alternative="two.sided")
cohen_test_genes  <- cohen.d(data_in,data_out,hedges.correction=TRUE)
power_test_genes  <- pwr.t2n.test(n1=length(data_in),n2=length(data_out), power=NULL, d = effect_size(data_in,data_out),
sig.level = 0.05)	#t-test (two samples with unequal n)
if(gene_count==1)
{
genes_out<-c(gene_name_now,
"LIHC",
t_test_genes$p.value,
-log10(t_test_genes$p.value),
toString(t_test_genes$conf.int[1:2]),
t_test_genes$statistic,
toString(power_test_genes$power),
toString(cohen_test_genes$estimate),
toString(cohen_test_genes$magnitude[1]),
toString(cohen_test_genes$conf.int),
avgNot,
avgIn,
virus_pos_count,
virus_neg_count,
paste(virus_sample_names,collapse=";")
)
} else
{
genes_out<-rbind(genes_out,
c(gene_name_now,
"LIHC",
t_test_genes$p.value,
-log10(t_test_genes$p.value),
toString(t_test_genes$conf.int[1:2]),
t_test_genes$statistic,
toString(power_test_genes$power),
toString(cohen_test_genes$estimate),
toString(cohen_test_genes$magnitude[1]),
toString(cohen_test_genes$conf.int),
avgNot,
avgIn,
virus_pos_count,
virus_neg_count,
paste(virus_sample_names,collapse=";")
))
}
}
#}
genes_out_frame<-data.frame(genes_out)
colnames(genes_out_frame)<-c("Gene symbol",
"Cell_type",
"p-value",
"-log p",
"conf-int",
"t-stat",
"power",
"cohen_estimate",
"cohen_mag",
"cohen_conf",
"avg_not",
"avg_virus",
"virus+_count",
"virus-_count",
"virus+_Sample_ids")
genes_out_frame$`Gene symbol`<-gsub("\\|\\w+ *","",genes_out_frame$`Gene symbol`)
#unique(new_anno_frame$Gene.symbol)
genes_out_anno<-inner_join(genes_out_frame, new_anno_frame,
by=c("Gene symbol"="Gene.symbol"))
write_xlsx(genes_out_anno, path=output_gene_file, col_names = TRUE)
#Thyroid carcinoma
input_type="THCA"
output_gene_file<-paste0("C:\\Users\\mmari\\Desktop\\",
input_type,
"+_vs_-_expression_t_tests.xlsx")
#Here we load just the tumor data from the file "T.xlsx" n
expression_file<-file.choose()
#expression_normal_file<-file.choose()
#expression_combiend_file<-file.choose()
expression_frame<-read.csv(expression_file)
#expression_normal_frame<-read.csv(expression_normal_file)
#expressio
View(expression_frame)
colnames(expression_frame)[1] <-"gene.id"
expression_frame<-expression_frame[-1,]
##################################### Can d
View(expression_frame)
#Thyroid carcinoma
input_type="THCA"
output_gene_file<-paste0("C:\\Users\\mmari\\Desktop\\",
input_type,
"+_vs_-_expression_t_tests.xlsx")
#Here we load just the tumor data from the file "T.xlsx" need to be careful
#to keep track if loading liver or head and neck data.
#Load the tumor data "T.xlsx"
#liver_data
genes_out = matrix(ncol=15)
#for(cancer_count in seq(from=2,by=1,to=ncol(virus_status_casted)))
#{
virus_sample_group <- virus_status_casted[,c("PatientID",input_type)]
#total_tcga<-length(unique(unlist(virus_sample_group[,1])))
#There are 8462 TCGA samples total
all_samples<-virus_sample_group[virus_sample_group[,2]!="NA",]
tot_samples<-length(all_samples[,1])
#205 for LIHC
virus_sample_names <- virus_sample_group[virus_sample_group[,2]=="TRUE",1]
not_sample_names <- virus_sample_group[virus_sample_group[,2]=="FALSE",1]
virus_pos_count<-length(virus_sample_names)
virus_neg_count<-length(not_sample_names)
#virus_sample_names<-sub("^[0]+", "", virus_sample_names)
#virus_sample_names<-paste("sample_",virus_sample_names, sep="")
virus_sub_names<-gsub("-",".",virus_sample_names)
not_sub_names<-gsub("-",".",not_sample_names)
expression_frame_in<-grepl(paste(virus_sub_names,collapse="|"),colnames(expression_frame))
expression_frame_out<-grepl(paste(not_sub_names,collapse="|"),colnames(expression_frame))
for(gene_count in seq(from=1,by=1,to=nrow(expression_frame)))
{
gene_name_now<-as.character(expression_frame[gene_count,1])
print(paste(c(input_type,gene_count,gene_name_now),sep="  :  "))
data_in<-as.double(as.matrix(expression_frame[gene_count,expression_frame_in]))
data_out<-as.double(as.matrix(expression_frame[gene_count,expression_frame_out]))
avgIn<-mean(data_in)
avgNot<-mean(data_out)
t_test_genes<-t.test(data_in,data_out,alternative="two.sided")
cohen_test_genes  <- cohen.d(data_in,data_out,hedges.correction=TRUE)
power_test_genes  <- pwr.t2n.test(n1=length(data_in),n2=length(data_out), power=NULL, d = effect_size(data_in,data_out),
sig.level = 0.05)	#t-test (two samples with unequal n)
if(gene_count==1)
{
genes_out<-c(gene_name_now,
input_type,
t_test_genes$p.value,
-log10(t_test_genes$p.value),
toString(t_test_genes$conf.int[1:2]),
t_test_genes$statistic,
toString(power_test_genes$power),
toString(cohen_test_genes$estimate),
toString(cohen_test_genes$magnitude[1]),
toString(cohen_test_genes$conf.int),
avgNot,
avgIn,
virus_pos_count,
virus_neg_count,
paste(virus_sample_names,collapse=";")
)
} else
{
genes_out<-rbind(genes_out,
c(gene_name_now,
input_type,
t_test_genes$p.value,
-log10(t_test_genes$p.value),
toString(t_test_genes$conf.int[1:2]),
t_test_genes$statistic,
toString(power_test_genes$power),
toString(cohen_test_genes$estimate),
toString(cohen_test_genes$magnitude[1]),
toString(cohen_test_genes$conf.int),
avgNot,
avgIn,
virus_pos_count,
virus_neg_count,
paste(virus_sample_names,collapse=";")
))
}
}
#}
genes_out_frame<-data.frame(genes_out)
colnames(genes_out_frame)<-c("Gene symbol",
"Cell_type",
"p-value",
"-log p",
"conf-int",
"t-stat",
"power",
"cohen_estimate",
"cohen_mag",
"cohen_conf",
"avg_not",
"avg_virus",
"virus+_count",
"virus-_count",
"virus+_Sample_ids")
genes_out_frame$`Gene symbol`<-gsub("\\|\\w+ *","",genes_out_frame$`Gene symbol`)
#unique(new_anno_frame$Gene.symbol)
genes_out_anno<-inner_join(genes_out_frame, new_anno_frame,
by=c("Gene symbol"="Gene.symbol"))
write_xlsx(genes_out_anno, path=output_gene_file, col_names = TRUE)
virus_sample_names
not_sample_names
virus_sample_group
input_type
all_samples<-virus_sample_group[virus_sample_group[,2]!="NA",]
tot_samples<-length(all_samples[,1])
tot_samples
virus_sample_names <- virus_sample_group[virus_sample_group[,2]=="TRUE",1]
not_sample_names <- virus_sample_group[virus_sample_group[,2]=="FALSE",1]
virus_pos_count<-length(virus_sample_names)
virus_neg_count<-length(not_sample_names)
virus_pos_count
virus_neg_count
t_test_genes<-t.test(data_in,data_out,alternative="two.sided")
data_in
data_out
expression_frame_in
virus_sub_names
expression_frame_in<-grepl(paste(virus_sub_names,collapse="|"),colnames(expression_frame))
expression_frame_out<-grepl(paste(not_sub_names,collapse="|"),colnames(expression_frame))
colnames(expression_frame)
paste(virus_sub_names,collapse="|")
expression_frame_in
data_in
expression_frame_out
not_sub_names
not_sample_names
colnames(expression_frame)
expression_frame_out<-grep(paste(not_sub_names,collapse="|"),colnames(expression_frame))
expression_frame_out
expression_file<-file.choose()
expression_file<-file.choose()
expression_file<-file.choose()
expression_file<-file.choose()
expression_file<-file.choose()
rm(list=ls())
#This is a script that I wrote to complete
#and double check the work that Brad did in February.
#03/02/2018
#install.packages("tibble")
#install.packages("data.table")
#install.packages("tidyverse")
#install.packages('reshape2')
#install.packages('effsize')
#install.packages('nlme')
#install.packages('pwr')
#install.packages("readxl")
#readxl is from tidyverse I believe
#install.packages("gdata")
#install.packages("plyr")
#source("https://bioconductor.org/biocLite.R")
#biocLite("maftools")
#biocLite("writexl")
#biocLite("writexl")
#install.packages("qpcR")
#install.packages("rowr")
#install.packages("yaml")
#rm(list=ls())
library(mixtools)
library(ggplot2)
library(ggfortify)
library(plyr)
library(dplyr)
library(xlsx)
library(tibble)
library(data.table)
library(tidyverse)
library(effsize)
library(nlme)
library(pwr)
library(maftools)
#The pwr package develped by Stéphane Champely,
#impliments power analysis as outlined by Cohen (!988).
library(readxl) #Seems to work great.
library(writexl)
library(tidyr)
library(gdata)
library(yaml)
library(rowr)
#Useful functions:
#pooled sd:
pooled_sd <- function(x,y)
{
n1<-length(x)
n2<-length(y)
s1<-sd(x)
s2<-sd(y)
pooled<-sqrt(((n1-1)*s1^2+(n2-1)*s2^2)/(n1+n2-2))
return(pooled)
}
effect_size<-function(x,y)
{
effect_size_calc<-abs(mean(x)-mean(y))/pooled_sd(x,y)
return(effect_size_calc)
}
#Thyroid carcinoma
input_type="THCA"
output_gene_file<-paste0("C:\\Users\\mmari\\Desktop\\",
input_type,
"+_vs_-_expression_t_tests.xlsx")
#Here we load just the tumor data from the file "T.xlsx" need to be careful
#to keep track if lo
#Thyroid carcinoma
input_type="THCA"
output_gene_file<-paste0("C:\\Users\\mmari\\Desktop\\",
input_type,
"+_vs_-_expression_t_tests.xlsx")
#Here we load just the tumor data from the file "T.xlsx" need to be careful
#to keep track if loading liver or head and neck data.
#Load the tumor data "T.xlsx"
expression_file<-file.choose()
#expression_normal_file<-file.choose()
#expression_combiend_file<-file.choose()
expression_frame<-read.csv(expression_file)
#expression_normal_frame<-read.csv(expression
expression_file<-file.choose()
rsconnect::setAccountInfo(name='mikemariani',
token='31490DF95DC5C0259A0E9857DC44F847',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mikemariani',
token='31490DF95DC5C0259A0E9857DC44F847',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='mikemariani',
token='31490DF95DC5C0259A0E9857DC44F847',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mikemariani',
token='31490DF95DC5C0259A0E9857DC44F847',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mikemariani',token='31490DF95DC5C0259A0E9857DC44F847',secret='<SECRET>')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='mikemariani',token='31490DF95DC5C0259A0E9857DC44F847',secret='<SECRET>')
rsconnect::setAccountInfo(name='mikemariani',token='31490DF95DC5C0259A0E9857DC44F847',secret='<SECRET>')
rsconnect::setAccountInfo(name='mikemariani',token='31490DF95DC5C0259A0E9857DC44F847',secret='<SECRET>')
rsconnect::setAccountInfo(name='mikemariani',
token='31490DF95DC5C0259A0E9857DC44F847',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='mikemariani',
token='31490DF95DC5C0259A0E9857DC44F847',
secret='<SECRET>')
Sys.setlocale(locale="English")
rsconnect::setAccountInfo(name='mikemariani',
token='31490DF95DC5C0259A0E9857DC44F847',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mikemariani',
token='31490DF95DC5C0259A0E9857DC44F847',
secret='qLbyAZo61xANR2BIAICHJT//vSMYrXKheytrxIVA')
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('C:\\Users\\mmari\\Desktop')
rsconnect::deployApp('C:\\Users\\mmari\\Desktop\\convert_format.R')
rsconnect::deployApp('C:\\Users\\mmari\\Desktop\\convert_format.R')
rsconnect::deployApp('C:\\Users\\mmari\\Desktop\\convert_format')
library(shiny); runApp('convert_format/convert_format.R')
runApp('convert_format/convert_format.R')
runApp('convert_format/convert_format.R')
runApp('convert_format/convert_format.R')
runApp('convert_format/convert_format.R')
runApp('convert_format/convert_format.R')
installed.packages('rsconnect')
install.packages("rsconnect")
library(shiny); runApp('convert_format.R')
